---
- name: Instalar .NET Core 8 y configurar la aplicación de cell shop
  hosts: 127.0.0.1
  connection: local
  become: yes
  tasks:
    - name: Actualizar el sistema
      apt:
        update_cache: yes
        upgrade: dist

    - name: Instalando las dependencias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Descargar el paquete de repositorio de Microsoft para Ubuntu 22.04 LTS
      get_url:
        url: https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        dest: /tmp/packages-microsoft-prod.deb

    - name: Instalar el paquete de repositorio de Microsoft
      command: dpkg -i /tmp/packages-microsoft-prod.deb

    - name: Actualizar el caché de apt después de agregar el repositorio
      apt:
        update_cache: yes

    - name: Instalar .NET SDK
      apt:
        name: dotnet-sdk-8.0
        state: present

    - name: Crear directorio para la aplicación del cell
      file:
        path: /home/ubuntu/cell
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Crear archivo del proyecto
      copy:
        dest: /home/ubuntu/cell/cell.csproj
        content: |
          <Project Sdk="Microsoft.NET.Sdk.Web">
            <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
            </PropertyGroup>
          </Project>
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Crear archivo de código fuente Program.cs
      copy:
        dest: /home/ubuntu/cell/Program.cs
        content: |
          using System;
          using System.Collections.Generic;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.Hosting;
          using Microsoft.AspNetCore.Builder;
          using Microsoft.Extensions.DependencyInjection;

          namespace MobileStoreApp
          {
              public class Program
              {
                  public static void Main(string[] args)
                  {
                      CreateHostBuilder(args).Build().Run();
                  }

                  public static IHostBuilder CreateHostBuilder(string[] args) =>
                      Host.CreateDefaultBuilder(args)
                          .ConfigureWebHostDefaults(webBuilder =>
                          {
                              webBuilder.UseStartup<Startup>();
                          });
              }

              public class Startup
              {
                  public void ConfigureServices(IServiceCollection services)
                  {
                      services.AddControllers();
                  }

                  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
                  {
                      if (env.IsDevelopment())
                      {
                          app.UseDeveloperExceptionPage();
                      }
                      else
                      {
                          app.UseExceptionHandler("/Home/Error");
                          app.UseHsts();
                      }
                      app.UseHttpsRedirection();
                      app.UseRouting();
                      app.UseAuthorization();
                      app.UseEndpoints(endpoints =>
                      {
                          endpoints.MapControllers();
                      });
                  }
              }

              // Definición de la clase Mobile
              public class Mobile
              {
                  private string _model;
                  private string _brand;
                  private double _price;
                  private List<string> _features = new List<string>();

                  public string Model
                  {
                      get { return _model; }
                      set { _model = value; }
                  }

                  public string Brand
                  {
                      get { return _brand; }
                      set { _brand = value; }
                  }

                  public double Price
                  {
                      get { return _price; }
                      set { _price = value; }
                  }

                  public List<string> Features
                  {
                      get { return _features; }
                      set { _features = value; }
                  }

                  public void PrintDetails()
                  {
                      Console.WriteLine($"Model: {Model}, Brand: {Brand}, Price: {Price:C}");
                      Console.WriteLine("Features:");
                      foreach (var feature in Features)
                      {
                          Console.WriteLine($"- {feature}");
                      }
                  }
              }

              // Implementación del patrón Factory Method
              public interface IMobileFactory
              {
                  Mobile CreateMobile(string model, string brand, double price, List<string> features);
              }

              public class MobileFactory : IMobileFactory
              {
                  public Mobile CreateMobile(string model, string brand, double price, List<string> features)
                  {
                      return new Mobile
                      {
                          Model = model,
                          Brand = brand,
                          Price = price,
                          Features = features
                      };
                  }
              }

              // Implementación del patrón Singleton
              public class StoreManager
              {
                  private static StoreManager _instance = null;
                  private static readonly object _lock = new object();
                  public List<Mobile> mobiles = new List<Mobile>();
                  private readonly IMobileFactory _mobileFactory;

                  private StoreManager(IMobileFactory mobileFactory)
                  {
                      _mobileFactory = mobileFactory;
                  }

                  public static StoreManager GetInstance(IMobileFactory mobileFactory)
                  {
                      if (_instance == null)
                      {
                          lock (_lock)
                          {
                              if (_instance == null)
                              {
                                  _instance = new StoreManager(mobileFactory);
                              }
                          }
                      }
                      return _instance;
                  }

                  public void AddMobile(string model, string brand, double price, List<string> features)
                  {
                      var mobile = _mobileFactory.CreateMobile(model, brand, price, features);
                      mobiles.Add(mobile);
                      mobile.PrintDetails();
                  }

                  public void PrintAllMobiles()
                  {
                      foreach (var mobile in mobiles)
                      {
                          mobile.PrintDetails();
                      }
                  }
              }
          }
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Construir la aplicación de cell
      command: dotnet build
      args:
        chdir: /home/ubuntu/cell
      become_user: ubuntu

    - name: Crear archivo de servicio systemd para la aplicación
      copy:
        dest: /etc/systemd/system/cell.service
        content: |
          [Unit]
          Description=Cell Shop Application
          After=network.target

          [Service]
          WorkingDirectory=/home/ubuntu/cell
          ExecStart=/usr/bin/dotnet /home/ubuntu/cell/bin/Debug/net8.0/cell.dll --urls "http://0.0.0.0:5000"
          Restart=always
          RestartSec=10
          SyslogIdentifier=cell-app
          User=ubuntu
          Environment=ASPNETCORE_ENVIRONMENT=Production

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Recargar systemd
      command: systemctl daemon-reload

    - name: Iniciar y habilitar la aplicación cell shop
      systemd:
        name: cell.service
        state: started
        enabled: yes
